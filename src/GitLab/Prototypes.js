/*
 * =========================================================
 *  üá∫üá¶ üá∫üá¶ üá∫üá¶ üá∫üá¶ üá∫üá¶ üá∫üá¶ üá∫üá¶ GitLab API üá∫üá¶ üá∫üá¶ üá∫üá¶ üá∫üá¶ üá∫üá¶ üá∫üá¶ üá∫üá¶
 * =========================================================
 * Copyright (c) 2019-2023
 * @Author: Rosbitskyy Ruslan
 * @email: rosbitskyy@gmail.com
 * @license Licensed under the MIT License (MIT)
 */

"use strict";

const defineObjectPrototype = (constructor, methodName, method) => {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –ø–µ—Ä–µ–¥–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º (—Ñ—É–Ω–∫—Ü—ñ—î—é)
    if (typeof constructor !== 'function') {
        throw new Error('Provided object must be a constructor function.');
    }
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞–∑–≤–∞ –º–µ—Ç–æ–¥—É —î —Ä—è–¥–∫–æ–º
    if (typeof methodName !== 'string') {
        throw new Error('Cannot define method. Method name must be a string.');
    }
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–µ—Ä–µ–¥–∞–Ω–∏–π –º–µ—Ç–æ–¥ —î —Ñ—É–Ω–∫—Ü—ñ—î—é
    if (typeof method !== 'function') {
        throw new Error('Cannot define method. Provided method is not a function.');
    }

    // –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    const prototype = constructor.prototype;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º–µ—Ç–æ–¥ –≤–∂–µ —ñ—Å–Ω—É—î
    if (!prototype.hasOwnProperty(methodName)) {
        Object.defineProperty(prototype, methodName, {
            value: method,
            writable: false,
            configurable: true,
            enumerable: false, // –º–µ—Ç–æ–¥ –Ω–µ –±—É–¥–µ –≤–∏–¥–Ω–æ –ø—Ä–∏ —ñ—Ç–µ—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Object.keys
        });
        return true; // –£—Å–ø—ñ—à–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    } else {
        return false; // –ú–µ—Ç–æ–¥ –≤–∂–µ —ñ—Å–Ω—É—î
    }
};

defineObjectPrototype(String, 'capitalize', function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
});